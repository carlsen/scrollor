;(function defineScrollor($) {

$.fn.scrollor = function (options) {

	var $container = this,

		settings = $.extend({
			selector: "",
			//tolerance: 0,
			throttle: 100,
			prefix: "scrollor-",
			suffixes: [
				"below-viewport",
				"top-visible",
				"active",
				"bottom-visible",
				"above-viewport"
			]
		}, options),

		positionalTests = [
			function below(p) { return p.vB < p.eT; },
			function topvisible(p) { return p.vT < p.eT && p.vB < p.eB; },
			function active(p) { return p.vB < p.eB || p.vT < p.eT; },
			function bottomvisible(p) { return p.vT < p.eB; }
		];

	// based on remysharp
	var throttleFunction = function(fn, th, scope) {
		var last,
			deferTimer,
			threshold = th || settings.throttle;
		return function () {
			var context = scope || this,
				now = Number(new Date()),
				args = arguments;

			if (last && now < last + threshold) {
				clearTimeout(deferTimer);
				deferTimer = setTimeout(function () {
					last = now;
					fn.apply(context, args);
				}, threshold);
			} else {
				last = now;
				fn.apply(context, args);
			}
		};
	};

	var calculateElementPosition = function (offsets) {
		var pos = 0;
		for(; pos<positionalTests.length; pos++) {
			if(positionalTests[pos](offsets)) {
				return pos;
			}
		}
		return positionalTests.length;
	};

	(function initializeScrollor() {
		var $win = $(window),
			$elements = $(settings.selector, $container),
			replaceRegex = new RegExp(settings.prefix + "[^\\s$]*");

		var updateClasses = function () {
			var viewportHeight = $win.height(),
				viewportTop = $win.scrollTop(),
				viewportBottom = viewportTop + viewportHeight;

			$elements.each(function updateElementClass(idx, element) {
				var $element = $(element),
					elementTop = $element.offset().top,
					elementBottom = elementTop + $element.height(),
					offsets = {
						vT: viewportTop,
						vB: viewportBottom,
						eT: elementTop,
						eB: elementBottom
					},
					position = calculateElementPosition(offsets),
					newClass = settings.prefix + settings.suffixes[position];
				
				element.className = element.className.replace(replaceRegex, newClass);
			});
		};

		var throttledUpdate = throttleFunction(updateClasses, settings.throttle);

		$elements.addClass(settings.prefix + "-pending");

		$win.on("resize", throttledUpdate);
		$win.on("scroll", throttledUpdate);

		throttledUpdate();

	})();

	return $container;
};

})(jQuery);
